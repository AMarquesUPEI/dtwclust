% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SHINY-ssdtwclust.R
\name{ssdtwclust}
\alias{ssdtwclust}
\title{A shiny app for semi-supervised DTW-based clustering}
\usage{
ssdtwclust(series, ...)
}
\arguments{
\item{series}{Time series in the formats accepted by \code{\link[=compare_clusterings]{compare_clusterings()}}.}

\item{...}{More arguments for \code{\link[shiny:runApp]{shiny::runApp()}}.}
}
\description{
Display a shiny user interface that implements the approach in .
}
\section{Explore}{


This part of the app is simply to see some basic characteristics of the provided series and
plot some of them. The field for integer IDs expects a valid R expression that specifies which
of the \code{series} should be plotted. Multivariate series are plotted with each variable in a
different facet.
}

\section{Cluster}{


The \code{window.size} parameter should \emph{not} be specified in the extra parameters, it will be
replaced with the computed values based on the slider. Using \code{\link[=dba]{dba()}} centroid is detected, and
will use the same window sizes.

Since \code{\link[=compare_clusterings]{compare_clusterings()}} supports parallelization with \code{\link[foreach:foreach]{foreach::foreach()}}, you can
register a parallel backend before opening the shiny app, but you should pre-load the workers
with the necessary packages and/or functions. See \code{\link[parallel:clusterEvalQ]{parallel::clusterEvalQ()}} and
\code{\link[parallel:clusterExport]{parallel::clusterExport()}}, as well as the examples below.
}

\section{Evaluate}{

}

\examples{

\dontrun{
require(doParallel)
workers <- makeCluster(detectCores())
clusterEvalQ(workers, {
    library(dtwclust)
    RcppParallel::setThreadOptions(1L)
})
registerDoParallel(workers)
ssdtwclust(CharTrajMV)
}

}
\author{
Alexis Sarda-Espinosa
}
